name: Release

on:
  push:
    tags:
      - 'v*'
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run mode (skip actual publishing)'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: yamldap
            asset_name: yamldap-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: yamldap
            asset_name: yamldap-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: yamldap.exe
            asset_name: yamldap-windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: yamldap
            asset_name: yamldap-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: yamldap
            asset_name: yamldap-macos-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          cargo build --release --target ${{ matrix.target }}
        shell: bash

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract release notes
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          VERSION=${TAG_NAME#v}
          if [ -f scripts/extract-changelog.sh ] && [ -f CHANGELOG.md ]; then
            chmod +x scripts/extract-changelog.sh
            ./scripts/extract-changelog.sh "$VERSION" > release-notes.md || echo "No changelog entry found for $VERSION" > release-notes.md
          else
            echo "No changelog found" > release-notes.md
          fi

      - name: Prepare release assets
        run: |
          mkdir release-assets
          for dir in artifacts/*/; do
            if [ -d "$dir" ]; then
              asset_name=$(basename "$dir")
              cp "$dir"* "release-assets/$asset_name"
              chmod +x "release-assets/$asset_name"
            fi
          done

      - name: Create GitHub Release
        if: ${{ inputs.dry_run != true }}
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-notes.md
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Test Release Creation (dry run)
        if: ${{ inputs.dry_run == true }}
        run: |
          echo "DRY RUN: Would create release with:"
          echo "- Release notes from: release-notes.md"
          echo "- Release notes content:"
          cat release-notes.md
          echo ""
          echo "- Artifacts:"
          ls -la release-assets/

  publish-crate:
    name: Publish to crates.io
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Publish to crates.io
        if: ${{ inputs.dry_run != true }}
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}

      - name: Test crates.io publish (dry run)
        if: ${{ inputs.dry_run == true }}
        run: |
          echo "DRY RUN: Would publish to crates.io"
          cargo publish --dry-run --locked

  publish-docker:
    name: Publish Docker Images
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Linux binaries
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract version
        id: version
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=latest
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          # Ensure lowercase for container registry
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "repo_owner=$REPO_OWNER" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: ${{ inputs.dry_run != true }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify registry access
        if: ${{ inputs.dry_run != true }}
        run: |
          echo "Checking registry access for ${{ github.actor }}..."
          echo "Repository: ${{ github.repository }}"
          echo "Registry URL: ghcr.io/${{ steps.version.outputs.repo_owner }}/yamldap"
          echo "Testing docker login..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "Login successful!"

          # Try to create/initialize the package by pushing a simple test image first
          echo "Initializing package if needed..."
          echo "FROM scratch" > Dockerfile.init
          docker build -f Dockerfile.init -t ghcr.io/${{ steps.version.outputs.repo_owner }}/yamldap:init .
          docker push ghcr.io/${{ steps.version.outputs.repo_owner }}/yamldap:init || echo "Package might already exist"
          rm Dockerfile.init

      - name: Prepare binaries for multi-arch build
        run: |
          # Create build context directory
          mkdir -p docker-context

          # Copy binaries with architecture-specific names
          cp artifacts/yamldap-linux-amd64/yamldap docker-context/yamldap-amd64
          cp artifacts/yamldap-linux-arm64/yamldap docker-context/yamldap-arm64

          # Make binaries executable
          chmod +x docker-context/yamldap-*

          # Create multi-arch Dockerfile
          cat > docker-context/Dockerfile << 'EOF'
          FROM scratch
          ARG TARGETARCH
          COPY yamldap-${TARGETARCH} /yamldap
          EXPOSE 3389
          ENTRYPOINT ["/yamldap"]
          EOF

      - name: Build and push multi-arch image
        if: ${{ inputs.dry_run != true }}
        uses: docker/build-push-action@v5
        with:
          context: docker-context
          file: docker-context/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ steps.version.outputs.repo_owner }}/yamldap:${{ steps.version.outputs.version }}
            ghcr.io/${{ steps.version.outputs.repo_owner }}/yamldap:latest
          # Add labels to link the package to the repository
          labels: |
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.description=Minimal LDAP server that uses YAML files as a data store
            org.opencontainers.image.licenses=MIT
          # Disable all extra features that might cause issues
          provenance: false
          sbom: false

      - name: Test Docker build (dry run)
        if: ${{ inputs.dry_run == true }}
        run: |
          echo "DRY RUN: Would build and push multi-arch Docker image using pre-built binaries"
          echo "- Using artifacts:"
          ls -la artifacts/
          echo ""
          echo "- Would create multi-arch image with tags:"
          echo "  - ghcr.io/${{ steps.version.outputs.repo_owner }}/yamldap:${{ steps.version.outputs.version }}"
          echo "  - ghcr.io/${{ steps.version.outputs.repo_owner }}/yamldap:latest"
          echo "- Platforms: linux/amd64, linux/arm64"

          # Test build for current platform
          mkdir -p test-context
          if [ -f "artifacts/yamldap-linux-amd64/yamldap" ]; then
            cp artifacts/yamldap-linux-amd64/yamldap test-context/yamldap-amd64
          fi
          cat > test-context/Dockerfile << 'EOF'
          FROM scratch
          COPY yamldap-amd64 /yamldap
          EXPOSE 3389
          ENTRYPOINT ["/yamldap"]
          EOF
          docker build -t yamldap:test test-context/

  summary:
    name: Release Summary
    needs: [release, publish-crate, publish-docker]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summary
        run: |
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "## ðŸ§ª Dry Run Complete!"
            echo ""
            echo "The release pipeline executed successfully in dry-run mode."
            echo "All artifacts were built but nothing was published."
            echo ""
            echo "To do an actual release:"
            echo "1. Run scripts/prepare-release.sh to prepare the release"
            echo "2. Push the tag to trigger this workflow"
          else
            echo "## ðŸŽ‰ Release Complete!"
            echo ""
            echo "The release has been published successfully:"
            echo "- âœ… Binaries uploaded to GitHub Release"
            echo "- âœ… Package published to crates.io"
            echo "- âœ… Docker images pushed to ghcr.io"
          fi